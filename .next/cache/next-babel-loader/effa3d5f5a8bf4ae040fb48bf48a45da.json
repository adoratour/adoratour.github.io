{"ast":null,"code":"import _Button from \"antd/lib/button\";\nimport _AutoComplete from \"antd/lib/auto-complete\";\nimport _Input from \"antd/lib/input\";\nimport _Checkbox from \"antd/lib/checkbox\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\TripFinder\\\\packages\\\\hotel-next\\\\container\\\\Home\\\\SimSearchForm\\\\SimSearchForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Router, { withRouter } from 'next/router';\nimport { FormWrapper, ComponentWrapper, RoomGuestWrapper, ItemWrapper } from './SimSearch.style';\nimport { FaMapMarkerAlt } from 'react-icons/fa';\nimport ViewWithPopup from 'components/UI/ViewWithPopup/ViewWithPopup';\nimport { getOverflowOptions } from 'antd/lib/tooltip/placements';\nconst countries = [{\n  name: \"Đông Nam Á\",\n  places: [\"Việt nam\", \"Singapore\", \" Malaysia\", \"Thái Lan\", \" Lào\", \"Philipines\", \" Indonesia\", \"Myanmar\", \"Campuchia\"]\n}, {\n  name: \"Đông Á\",\n  places: [\"Hàn Quốc\", \"Nhật Bản\", \"Đài Loan\", \"Trung Quốc\", \"Hồng Kông\", \"Ma cao\"]\n}, {\n  name: \"Nam Á / Trung Đông\",\n  places: [\"Du bai - AUE\", \"Ấn Độ\", \"Thổ Nhĩ Kỳ\", \"Sri Lanka\", \"Maldives\"]\n}, {\n  name: \"Châu Âu\",\n  places: [\"Schengen\", \"Pháp\", \"Ý\", \"Thụy Sỹ\", \"Anh\", \"Áo\", \"Tây Ban Nha\", \"Iceland\", \"Phần Lan\", \"Đức\", \"Hà Lan\", \"Hy Lạp\", \"Bỉ\", \"Cộng Hòa Séc\", \"Croatia\", \"Đan Mạch\", \"Hungary\", \"Monaco\", \"Na Uy\", \"Nga\", \"Bồ Đào Nha\", \"Thụy Điển\"]\n}, {\n  name: \"Châu Mỹ\",\n  places: [\"Mỹ\", \"Canada\", \"Brazil\"]\n}, {\n  name: \"Châu Úc / Châu Phi\",\n  places: [\"Úc\", \"New Zeland\"]\n}];\n\nconst CheckBox = ({\n  data = \"\",\n  checked,\n  onChange: _onChange\n}) => {\n  if (!data) return null;\n  return __jsx(\"div\", {\n    style: {\n      flexDirection: 'row',\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, __jsx(_Checkbox, {\n    key: data,\n    checked: checked === data,\n    onChange: event => _onChange(event, data),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, data));\n}; // text-overflow: ellipsis\n\n\n_c = CheckBox;\n\nconst CheckBoxLabel = ({\n  label = \"\"\n}) => __jsx(\"span\", {\n  style: {\n    fontWeight: \"bold\",\n    color: \"#000\",\n    fontSize: 16\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }\n}, label);\n\n_c2 = CheckBoxLabel;\n\nconst SimSearchForm = () => {\n  _s();\n\n  const _useState = useState(\"\"),\n        checked = _useState[0],\n        onCheck = _useState[1];\n\n  function onChange(event, checkedPlace) {\n    onCheck(event.target.checked ? checkedPlace : \"\");\n  }\n\n  const onSelect = data => {\n    console.log(\"onSelect\", data);\n  };\n\n  const options = countries.map(item => ({\n    label: __jsx(CheckBoxLabel, {\n      key: item.name,\n      label: item.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 16\n      }\n    }),\n    options: item.places.map(i => ({\n      value: i,\n      label: __jsx(CheckBox, {\n        key: i,\n        data: i,\n        checked: checked,\n        onChange: onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 20\n        }\n      })\n    }))\n  }));\n  return __jsx(React.Fragment, null, __jsx(FormWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, __jsx(ComponentWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, __jsx(FaMapMarkerAlt, {\n    className: \"map-marker\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }), __jsx(_AutoComplete, {\n    className: \"map_autocomplete\",\n    options: options,\n    onSelect: onSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }, __jsx(_Input, {\n    placeholder: \"Nh\\u1EADp \\u0111i\\u1EC3m \\u0111i\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 25\n    }\n  }))), __jsx(_Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, \"T\\xECm ki\\u1EBFm\")));\n};\n\n_s(SimSearchForm, \"qPCX88kLsgF5NqUeYntbDD9uiA0=\");\n\n_c3 = SimSearchForm;\nexport default _c4 = withRouter(SimSearchForm);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"CheckBox\");\n$RefreshReg$(_c2, \"CheckBoxLabel\");\n$RefreshReg$(_c3, \"SimSearchForm\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/TripFinder/packages/hotel-next/container/Home/SimSearchForm/SimSearchForm.js"],"names":["React","useState","Router","withRouter","FormWrapper","ComponentWrapper","RoomGuestWrapper","ItemWrapper","FaMapMarkerAlt","ViewWithPopup","getOverflowOptions","countries","name","places","CheckBox","data","checked","onChange","flexDirection","display","event","CheckBoxLabel","label","fontWeight","color","fontSize","SimSearchForm","onCheck","checkedPlace","target","onSelect","console","log","options","map","item","i","value"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,IAAiBC,UAAjB,QAAmC,aAAnC;AACA,SACIC,WADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,EAIIC,WAJJ,QAKO,mBALP;AAMA,SAASC,cAAT,QAA+B,gBAA/B;AAEA,OAAOC,aAAP,MAA0B,2CAA1B;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AAEA,MAAMC,SAAS,GAAG,CACd;AACIC,EAAAA,IAAI,EAAE,YADV;AAEIC,EAAAA,MAAM,EAAE,CACJ,UADI,EAEJ,WAFI,EAGJ,WAHI,EAIJ,UAJI,EAKJ,MALI,EAMJ,YANI,EAOJ,YAPI,EAQJ,SARI,EASJ,WATI;AAFZ,CADc,EAed;AACID,EAAAA,IAAI,EAAE,QADV;AAEIC,EAAAA,MAAM,EAAE,CACJ,UADI,EAEJ,UAFI,EAGJ,UAHI,EAIJ,YAJI,EAKJ,WALI,EAMJ,QANI;AAFZ,CAfc,EA0Bd;AACID,EAAAA,IAAI,EAAE,oBADV;AAEIC,EAAAA,MAAM,EAAE,CAAC,cAAD,EAAiB,OAAjB,EAA0B,YAA1B,EAAwC,WAAxC,EAAqD,UAArD;AAFZ,CA1Bc,EA8Bd;AACID,EAAAA,IAAI,EAAE,SADV;AAEIC,EAAAA,MAAM,EAAE,CACJ,UADI,EAEJ,MAFI,EAGJ,GAHI,EAIJ,SAJI,EAKJ,KALI,EAMJ,IANI,EAOJ,aAPI,EAQJ,SARI,EASJ,UATI,EAUJ,KAVI,EAWJ,QAXI,EAYJ,QAZI,EAaJ,IAbI,EAcJ,cAdI,EAeJ,SAfI,EAgBJ,UAhBI,EAiBJ,SAjBI,EAkBJ,QAlBI,EAmBJ,OAnBI,EAoBJ,KApBI,EAqBJ,YArBI,EAsBJ,WAtBI;AAFZ,CA9Bc,EAyDd;AACID,EAAAA,IAAI,EAAE,SADV;AAEIC,EAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,QAAP,EAAiB,QAAjB;AAFZ,CAzDc,EA6Dd;AACID,EAAAA,IAAI,EAAE,oBADV;AAEIC,EAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,YAAP;AAFZ,CA7Dc,CAAlB;;AAmEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAI,GAAG,EAAT;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA,QAAQ,EAARA;AAAtB,CAAD,KAAsC;AACnD,MAAI,CAACF,IAAL,EAAW,OAAO,IAAP;AACX,SACI;AAAK,IAAA,KAAK,EAAE;AAACG,MAAAA,aAAa,EAAC,KAAf;AAAsBC,MAAAA,OAAO,EAAC;AAA9B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AACI,IAAA,GAAG,EAAEJ,IADT;AAEI,IAAA,OAAO,EAAEC,OAAO,KAAKD,IAFzB;AAGI,IAAA,QAAQ,EAAGK,KAAD,IAAWH,SAAQ,CAACG,KAAD,EAAQL,IAAR,CAHjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKKA,IALL,CADA,CADJ;AAWH,CAbD,C,CAcA;;;KAdMD,Q;;AAgBN,MAAMO,aAAa,GAAG,CAAC;AAAEC,EAAAA,KAAK,GAAG;AAAV,CAAD,KAClB;AAAM,EAAA,KAAK,EAAE;AAAEC,IAAAA,UAAU,EAAE,MAAd;AAAsBC,IAAAA,KAAK,EAAE,MAA7B;AAAqCC,IAAAA,QAAQ,EAAE;AAA/C,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACKH,KADL,CADJ;;MAAMD,a;;AAMN,MAAMK,aAAa,GAAG,MAAM;AAAA;;AAAA,oBACGzB,QAAQ,CAAC,EAAD,CADX;AAAA,QACjBe,OADiB;AAAA,QACRW,OADQ;;AAGxB,WAASV,QAAT,CAAkBG,KAAlB,EAAyBQ,YAAzB,EAAuC;AACnCD,IAAAA,OAAO,CAACP,KAAK,CAACS,MAAN,CAAab,OAAb,GAAuBY,YAAvB,GAAsC,EAAvC,CAAP;AACH;;AAED,QAAME,QAAQ,GAAIf,IAAD,IAAU;AACvBgB,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBjB,IAAxB;AACH,GAFD;;AAIA,QAAMkB,OAAO,GAAGtB,SAAS,CAACuB,GAAV,CAAeC,IAAD,KAAW;AACrCb,IAAAA,KAAK,EAAE,MAAC,aAAD;AAAe,MAAA,GAAG,EAAEa,IAAI,CAACvB,IAAzB;AAA+B,MAAA,KAAK,EAAEuB,IAAI,CAACvB,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD8B;AAErCqB,IAAAA,OAAO,EAAEE,IAAI,CAACtB,MAAL,CAAYqB,GAAZ,CAAiBE,CAAD,KAAQ;AAC7BC,MAAAA,KAAK,EAAED,CADsB;AAE7Bd,MAAAA,KAAK,EAAE,MAAC,QAAD;AAAU,QAAA,GAAG,EAAEc,CAAf;AAAkB,QAAA,IAAI,EAAEA,CAAxB;AAA2B,QAAA,OAAO,EAAEpB,OAApC;AAA6C,QAAA,QAAQ,EAAEC,QAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFsB,KAAR,CAAhB;AAF4B,GAAX,CAAd,CAAhB;AAQA,SACI,4BACI,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACQ,MAAC,cAAD;AAAgB,IAAA,SAAS,EAAC,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADR,EAEQ;AAAc,IAAA,SAAS,EAAC,kBAAxB;AACI,IAAA,OAAO,EAAEgB,OADb;AAEI,IAAA,QAAQ,EAAEH,QAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII;AAAO,IAAA,WAAW,EAAC,kCAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CAFR,CADA,EAUI;AACI,IAAA,IAAI,EAAC,SADT;AAEI,IAAA,QAAQ,EAAC,QAFb;AAGI,IAAA,IAAI,EAAC,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAVJ,CADJ,CADJ;AAsBH,CAzCD;;GAAMJ,a;;MAAAA,a;AA2CN,qBAAevB,UAAU,CAACuB,aAAD,CAAzB","sourcesContent":["import React, { useState } from 'react'\r\nimport Router, { withRouter } from 'next/router';\r\nimport {\r\n    FormWrapper,\r\n    ComponentWrapper,\r\n    RoomGuestWrapper,\r\n    ItemWrapper,\r\n} from './SimSearch.style';\r\nimport { FaMapMarkerAlt } from 'react-icons/fa';\r\nimport { Button, Input, AutoComplete, Checkbox, Row, Col, Space } from 'antd';\r\nimport ViewWithPopup from 'components/UI/ViewWithPopup/ViewWithPopup';\r\nimport { getOverflowOptions } from 'antd/lib/tooltip/placements';\r\n\r\nconst countries = [\r\n    {\r\n        name: \"Đông Nam Á\",\r\n        places: [\r\n            \"Việt nam\",\r\n            \"Singapore\",\r\n            \" Malaysia\",\r\n            \"Thái Lan\",\r\n            \" Lào\",\r\n            \"Philipines\",\r\n            \" Indonesia\",\r\n            \"Myanmar\",\r\n            \"Campuchia\"\r\n        ]\r\n    },\r\n    {\r\n        name: \"Đông Á\",\r\n        places: [\r\n            \"Hàn Quốc\",\r\n            \"Nhật Bản\",\r\n            \"Đài Loan\",\r\n            \"Trung Quốc\",\r\n            \"Hồng Kông\",\r\n            \"Ma cao\"\r\n        ]\r\n    },\r\n    {\r\n        name: \"Nam Á / Trung Đông\",\r\n        places: [\"Du bai - AUE\", \"Ấn Độ\", \"Thổ Nhĩ Kỳ\", \"Sri Lanka\", \"Maldives\"]\r\n    },\r\n    {\r\n        name: \"Châu Âu\",\r\n        places: [\r\n            \"Schengen\",\r\n            \"Pháp\",\r\n            \"Ý\",\r\n            \"Thụy Sỹ\",\r\n            \"Anh\",\r\n            \"Áo\",\r\n            \"Tây Ban Nha\",\r\n            \"Iceland\",\r\n            \"Phần Lan\",\r\n            \"Đức\",\r\n            \"Hà Lan\",\r\n            \"Hy Lạp\",\r\n            \"Bỉ\",\r\n            \"Cộng Hòa Séc\",\r\n            \"Croatia\",\r\n            \"Đan Mạch\",\r\n            \"Hungary\",\r\n            \"Monaco\",\r\n            \"Na Uy\",\r\n            \"Nga\",\r\n            \"Bồ Đào Nha\",\r\n            \"Thụy Điển\"\r\n        ]\r\n    },\r\n    {\r\n        name: \"Châu Mỹ\",\r\n        places: [\"Mỹ\", \"Canada\", \"Brazil\"]\r\n    },\r\n    {\r\n        name: \"Châu Úc / Châu Phi\",\r\n        places: [\"Úc\", \"New Zeland\"]\r\n    }\r\n];\r\n\r\nconst CheckBox = ({ data = \"\", checked, onChange }) => {\r\n    if (!data) return null;\r\n    return (\r\n        <div style={{flexDirection:'row', display:'flex'}}>\r\n        <Checkbox\r\n            key={data}\r\n            checked={checked === data}\r\n            onChange={(event) => onChange(event, data)}\r\n        >\r\n            {data}\r\n        </Checkbox>\r\n        </div>\r\n    );\r\n};\r\n// text-overflow: ellipsis\r\n\r\nconst CheckBoxLabel = ({ label = \"\" }) => (\r\n    <span style={{ fontWeight: \"bold\", color: \"#000\", fontSize: 16 }}>\r\n        {label}\r\n    </span>\r\n);\r\n\r\nconst SimSearchForm = () => {\r\n    const [checked, onCheck] = useState(\"\");\r\n\r\n    function onChange(event, checkedPlace) {\r\n        onCheck(event.target.checked ? checkedPlace : \"\");\r\n    }\r\n\r\n    const onSelect = (data) => {\r\n        console.log(\"onSelect\", data);\r\n    };\r\n\r\n    const options = countries.map((item) => ({\r\n        label: <CheckBoxLabel key={item.name} label={item.name} />,\r\n        options: item.places.map((i) => ({\r\n            value: i,\r\n            label: <CheckBox key={i} data={i} checked={checked} onChange={onChange} />\r\n        }))\r\n    }));\r\n\r\n    return (\r\n        <>\r\n            <FormWrapper>\r\n            <ComponentWrapper>\r\n                    <FaMapMarkerAlt className=\"map-marker\" />\r\n                    <AutoComplete className=\"map_autocomplete\"\r\n                        options={options}\r\n                        onSelect={onSelect}\r\n                    >\r\n                        <Input placeholder=\"Nhập điểm đi\" />\r\n                    </AutoComplete>\r\n                </ComponentWrapper>\r\n                <Button\r\n                    type=\"primary\"\r\n                    htmlType=\"submit\"\r\n                    size=\"large\"\r\n                >\r\n                    Tìm kiếm\r\n                </Button>\r\n            </FormWrapper>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withRouter(SimSearchForm);"]},"metadata":{},"sourceType":"module"}