{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport fetch from 'isomorphic-unfetch';\nimport shuffle from 'lodash/shuffle';\n\nconst FetchAPIData = url => {\n  return fetch(url).then(r => r.json()).then(data => {\n    return data;\n  });\n};\n\n_c = FetchAPIData;\nexport const ProcessAPIData = apiData => {\n  let fetchData = {};\n\n  if (apiData) {\n    apiData.forEach((item, key) => {\n      fetchData.data = item.data ? [...item.data] : [];\n      fetchData.name = item.name ? item.name : '';\n    });\n  }\n\n  const data = fetchData ? fetchData.data : [];\n  return data;\n};\n_c2 = ProcessAPIData;\nexport const SearchedData = processedData => {\n  const randNumber = Math.floor(Math.random() * 50 + 1);\n  const data = shuffle(processedData.slice(0, randNumber));\n  return data;\n};\n_c3 = SearchedData;\nexport const SearchStateKeyCheck = state => {\n  for (var key in state) {\n    if (state[key] !== null && state[key] != '' && state[key] != [] && state[key] != 0 && state[key] != 100) {\n      return true;\n    }\n  }\n\n  return false;\n};\n_c4 = SearchStateKeyCheck;\nexport const Paginator = (posts, processedData, limit) => {\n  return [...posts, ...processedData.slice(posts.length, posts.length + limit)];\n};\n_c5 = Paginator;\n\nconst GetAPIData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(apiUrl) {\n    var promises, receviedData;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          promises = apiUrl.map( /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(repo) {\n              var apiPath, api, response;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    apiPath = \"\".concat(process.env.SERVER_API, \"/static/data\"); // read it from env variable\n\n                    api = \"\".concat(apiPath, \"/\").concat(repo.endpoint, \".json\");\n                    _context.next = 4;\n                    return FetchAPIData(api);\n\n                  case 4:\n                    response = _context.sent;\n                    return _context.abrupt(\"return\", {\n                      name: repo.name,\n                      data: response\n                    });\n\n                  case 6:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _callee);\n            }));\n\n            return function (_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }());\n          _context2.next = 3;\n          return Promise.all(promises);\n\n        case 3:\n          receviedData = _context2.sent;\n          return _context2.abrupt(\"return\", receviedData);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n\n  return function GetAPIData(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n_c6 = GetAPIData;\nexport default GetAPIData;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"FetchAPIData\");\n$RefreshReg$(_c2, \"ProcessAPIData\");\n$RefreshReg$(_c3, \"SearchedData\");\n$RefreshReg$(_c4, \"SearchStateKeyCheck\");\n$RefreshReg$(_c5, \"Paginator\");\n$RefreshReg$(_c6, \"GetAPIData\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/TripFinder/packages/hotel-next/library/helpers/get_api_data.js"],"names":["fetch","shuffle","FetchAPIData","url","then","r","json","data","ProcessAPIData","apiData","fetchData","forEach","item","key","name","SearchedData","processedData","randNumber","Math","floor","random","slice","SearchStateKeyCheck","state","Paginator","posts","limit","length","GetAPIData","apiUrl","promises","map","repo","apiPath","process","env","SERVER_API","api","endpoint","response","Promise","all","receviedData"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,YAAY,GAAIC,GAAD,IAAS;AAC5B,SAAOH,KAAK,CAACG,GAAD,CAAL,CACJC,IADI,CACEC,CAAD,IAAOA,CAAC,CAACC,IAAF,EADR,EAEJF,IAFI,CAEEG,IAAD,IAAU;AACd,WAAOA,IAAP;AACD,GAJI,CAAP;AAKD,CAND;;KAAML,Y;AAQN,OAAO,MAAMM,cAAc,GAAIC,OAAD,IAAa;AACzC,MAAIC,SAAS,GAAG,EAAhB;;AACA,MAAID,OAAJ,EAAa;AACXA,IAAAA,OAAO,CAACE,OAAR,CAAgB,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC7BH,MAAAA,SAAS,CAACH,IAAV,GAAiBK,IAAI,CAACL,IAAL,GAAY,CAAC,GAAGK,IAAI,CAACL,IAAT,CAAZ,GAA6B,EAA9C;AACAG,MAAAA,SAAS,CAACI,IAAV,GAAiBF,IAAI,CAACE,IAAL,GAAYF,IAAI,CAACE,IAAjB,GAAwB,EAAzC;AACD,KAHD;AAID;;AACD,QAAMP,IAAI,GAAGG,SAAS,GAAGA,SAAS,CAACH,IAAb,GAAoB,EAA1C;AACA,SAAOA,IAAP;AACD,CAVM;MAAMC,c;AAYb,OAAO,MAAMO,YAAY,GAAIC,aAAD,IAAmB;AAC7C,QAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAAhB,GAAqB,CAAhC,CAAnB;AACA,QAAMb,IAAI,GAAGN,OAAO,CAACe,aAAa,CAACK,KAAd,CAAoB,CAApB,EAAuBJ,UAAvB,CAAD,CAApB;AACA,SAAOV,IAAP;AACD,CAJM;MAAMQ,Y;AAMb,OAAO,MAAMO,mBAAmB,GAAIC,KAAD,IAAW;AAC5C,OAAK,IAAIV,GAAT,IAAgBU,KAAhB,EAAuB;AACrB,QACEA,KAAK,CAACV,GAAD,CAAL,KAAe,IAAf,IACAU,KAAK,CAACV,GAAD,CAAL,IAAc,EADd,IAEAU,KAAK,CAACV,GAAD,CAAL,IAAc,EAFd,IAGAU,KAAK,CAACV,GAAD,CAAL,IAAc,CAHd,IAIAU,KAAK,CAACV,GAAD,CAAL,IAAc,GALhB,EAME;AACA,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD,CAbM;MAAMS,mB;AAeb,OAAO,MAAME,SAAS,GAAG,CAACC,KAAD,EAAQT,aAAR,EAAuBU,KAAvB,KAAiC;AACxD,SAAO,CAAC,GAAGD,KAAJ,EAAW,GAAGT,aAAa,CAACK,KAAd,CAAoBI,KAAK,CAACE,MAA1B,EAAkCF,KAAK,CAACE,MAAN,GAAeD,KAAjD,CAAd,CAAP;AACD,CAFM;MAAMF,S;;AAIb,MAAMI,UAAU;AAAA,sEAAG,kBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AACXC,UAAAA,QADW,GACAD,MAAM,CAACE,GAAP;AAAA,iFAAW,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AACpBC,oBAAAA,OADoB,aACPC,OAAO,CAACC,GAAR,CAAYC,UADL,mBAC+B;;AACnDC,oBAAAA,GAFoB,aAEXJ,OAFW,cAEAD,IAAI,CAACM,QAFL;AAAA;AAAA,2BAGHpC,YAAY,CAACmC,GAAD,CAHT;;AAAA;AAGpBE,oBAAAA,QAHoB;AAAA,qDAInB;AACLzB,sBAAAA,IAAI,EAAEkB,IAAI,CAAClB,IADN;AAELP,sBAAAA,IAAI,EAAEgC;AAFD,qBAJmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAX;;AAAA;AAAA;AAAA;AAAA,cADA;AAAA;AAAA,iBAUUC,OAAO,CAACC,GAAR,CAAYX,QAAZ,CAVV;;AAAA;AAUXY,UAAAA,YAVW;AAAA,4CAWVA,YAXU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVd,UAAU;AAAA;AAAA;AAAA,GAAhB;;MAAMA,U;AAcN,eAAeA,UAAf","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport shuffle from 'lodash/shuffle';\n\nconst FetchAPIData = (url) => {\n  return fetch(url)\n    .then((r) => r.json())\n    .then((data) => {\n      return data;\n    });\n};\n\nexport const ProcessAPIData = (apiData) => {\n  let fetchData = {};\n  if (apiData) {\n    apiData.forEach((item, key) => {\n      fetchData.data = item.data ? [...item.data] : [];\n      fetchData.name = item.name ? item.name : '';\n    });\n  }\n  const data = fetchData ? fetchData.data : [];\n  return data;\n};\n\nexport const SearchedData = (processedData) => {\n  const randNumber = Math.floor(Math.random() * 50 + 1);\n  const data = shuffle(processedData.slice(0, randNumber));\n  return data;\n};\n\nexport const SearchStateKeyCheck = (state) => {\n  for (var key in state) {\n    if (\n      state[key] !== null &&\n      state[key] != '' &&\n      state[key] != [] &&\n      state[key] != 0 &&\n      state[key] != 100\n    ) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const Paginator = (posts, processedData, limit) => {\n  return [...posts, ...processedData.slice(posts.length, posts.length + limit)];\n};\n\nconst GetAPIData = async (apiUrl) => {\n  const promises = apiUrl.map(async (repo) => {\n    const apiPath = `${process.env.SERVER_API}/static/data`; // read it from env variable\n    const api = `${apiPath}/${repo.endpoint}.json`;\n    const response = await FetchAPIData(api);\n    return {\n      name: repo.name,\n      data: response,\n    };\n  });\n  const receviedData = await Promise.all(promises);\n  return receviedData;\n};\n\nexport default GetAPIData;\n"]},"metadata":{},"sourceType":"module"}